
//Do a topological sort and store in a stack.
//Create a transpose adjacency list.
//Start traversing according to topological sort and transpose adjacency matrix.
//Start popping elements from stack. If it is not visited, then it will contribute in a new component. Do dfs traversal on it to it's adjacent nodes.
class Solution
{
  public:
  //dfs traversal for in the transposed adjacency matrix
  void revdfs(int node, vector<int>&vis, vector<int>transpose[]){
      vis[node] = 1;
      for(auto p: transpose[node]){
          if(!vis[p]){
              revdfs(p,vis,transpose);
          }
      }
  }
  //Topological sort 
    void tpsort(vector<int>&vis, vector<int>adj[], int node, stack<int>&st){
        vis[node] = 1;
        for(auto p: adj[node]){
            if(!vis[p]){
                tpsort(vis,adj,p,st);   
            }
        }
        st.push(node);
    }
    int kosaraju(int V, vector<int> adj[])
    {
        stack<int>st;
        vector<int>vis(V,0);
        for(int i=0; i<V; i++){
            if(!vis[i]){
                tpsort(vis,adj,i,st);
            }
        }
        //creating a transpose adjacency list
        vector<int>transpose[V];
        for(int i=0; i<V; i++){
            vis[i] = 0;
            for(auto p: adj[i]){
                transpose[p].push_back(i); //this will reverse the direction of the edges
            }
        }
        
        int ans = 0;
        //start traversing according to topological sort
        //will traverse with the help of transpose adjacency matrix
        while(!st.empty()){
            int top = st.top();
            st.pop();
            if(!vis[top]){
                ans++; //contribute in a new component
                revdfs(top,vis,transpose);
            }
        }
        return ans;
    }
};
