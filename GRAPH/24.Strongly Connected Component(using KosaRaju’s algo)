
class Solution
{
	public:
	void dfs(int node,vector<int> adj[],vector<int> &vis ,stack<int> &st){
	    vis[node]= {1};
	    for(auto it:adj[node]){
	        if(!vis[it]){
	            dfs(it,adj,vis,st);
	        }
	    }
	    st.push(node);
	}
	
	void revdfs(int node,vector<int> vis,vector<int> transpose){
	    cout<<node;
	    vis[node]=1;
	    for(auto it:transpose[node]){
	        if(!vis[it]){
	            revdfs(it,vis,transpose);
	        }
	    }
	}
	
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<int> adj[])
    {
        //code here
        
        
        stack<int>st;
        vector<int >vis(V,0);
        for(int i = 0;i<V;i++){
            if(!vis[i]){
                dfs(0,adj,vis,st);
            }
        }
        vector<int> transpose(V);
        for(int i = 0;i<V;i++){
            vis[i] = 0;
            for(auto it:adj[i]){
                transpose[it].push_back(i);
            }
            
            }
            while(!st.empty()){
                {int node= st.top();
                st.pop();
                if(!vis[node]){
                   
                      revdfs(node,vis,transpose);
                      cout<<endl;
                }
            }
            return 0;
    }
};
