
Implementing Dijkstra Algorithm
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq; //minimum heap acc to min dist at top
         vector<int> distvac(V,INT_MAX);
         distvac[S]=0;
         pq.push(make_pair(0,S));//syntx of pushing in heap
         while(!pq.empty()){
             auto tp= pq.top();
             int dist= tp.first; //0
             int node= tp.second;//2
             pq.pop();
            //  for(auto it: adj[node]){
            //      int nxt= it.first(); //0
            //      int nxtdist= it.second();//6
            //      if(distvac[nxt]>distvac[node]+nxtdist){ //imtmax>0+6
            //          distvac[nxt]=distvac[node]+nxtdist;//6
            //          pq.push(make_pair(distvac[nxt],nxt)) ; //{dit,node}
            //      }
            //  }
            for(auto it:adj[node]){
                int x = it[1]+dist;
                if(distvac[it[0]]>x){
                    distvac[it[0]]=x;
                    pq.push({x,it[0]});
                }
            }
         }
         return distvac;
    }
};

// here the code for using pair in adjeancy list and below that we using vector vectr adj list
